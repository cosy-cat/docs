{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my docs","text":""},{"location":"UE/1_intro/","title":"Tips","text":"<p>BeginPlay:</p> <ul> <li>play/F8 == disembody to see the pawn</li> <li>F8 again to possess again</li> <li>auto action by UE : on play a pawn is created from start location : in BP, <code>get pawn...</code></li> </ul> <p>BluePrint:</p> <ul> <li>create BluePrint from actor : right panel icon (3 squares)</li> </ul> <p>BluePrint Canvas:</p> <ul> <li>get pawn</li> <li>get forward vector</li> <li>spawn from (BP, ...)</li> <li>select multiple and right clic to make a  function of a bloc</li> </ul> <p>BluePrint Level</p> <ul> <li>select object (cube, etc..) from the main scene</li> <li>clic open Level Blue Print</li> <li>right clic \"create a reference to the object\"</li> </ul> <p>make a reusable blueprint such a bullet, but/and instantiate it from the level blueprint</p> <p>BSP (Binary Space Partitioning):</p> <ul> <li>fast level prototyping</li> <li> <p>\u2699\ufe0f  How to Use BSP in Unreal Engine:</p> <p>Open the Selection Mode Panel from the drop down under level name.   Select BSP (Geometry) and choose a shape (Box, Cylinder, etc.).   Drag the shape into the level.   Modify its size and shape in the Details Panel.   Convert to Static Mesh when the design is finalized (Right-click \u2192 Convert to Static Mesh).</p> </li> <li> <p>\ud83d\udccc Types of BSP Brushes:</p> <p>Additive Brush: Creates solid geometry.   Subtractive Brush: Cuts away from existing geometry.</p> </li> <li> <p>\u26a0\ufe0f  Performance Considerations: BSP is not as optimized as static meshes and should generally be replaced with static meshes for the final level.</p> </li> </ul> <p>GameModes</p> <p>Change game mode (from TPs to FPs) by: - open content drawer, clic + add button, add feature/content pack, 1st or 3rd Person BP - open Project Settings, Project Maps and Modes, change default Pawn Class to desired BP</p>","tags":["unreal-engine"]},{"location":"UE/2_coding/","title":"Coding","text":"","tags":["unreal-engine"]},{"location":"UE/2_coding/#vscode-build","title":"VsCode build","text":"<ul> <li>run build task: ${Project}Editor Win64 Development Build</li> </ul>","tags":["unreal-engine"]},{"location":"UE/2_coding/#tick","title":"Tick","text":"<ul> <li>called every frame <code>deltaTime</code> parameter: to be used to make operations \"frame rate independent\" (by * speed of movement by deltaTime for instance)</li> </ul>","tags":["unreal-engine"]},{"location":"UE/2_coding/#log","title":"Log","text":"<p>docs</p> <pre><code>UE_LOG(LogTemp, Level, TEXT(\"message\"));\n</code></pre>","tags":["unreal-engine"]},{"location":"UE/2_coding/#adding-cpp-class","title":"Adding CPP class","text":"<p>\ud83d\udca1 1st time :</p> <ul> <li>Use default location</li> <li>close editor UE</li> <li> <p>in vscode, terminal/run/task  <code>*Win64 Development Build</code></p> </li> <li> <p>reopen UE editor, now the C++ project folder with the cpp files will appear in the content drawer</p> </li> </ul> <p>Now and next times :</p> <ul> <li>in tools menu regenerate project files (avoid sqwiggles in vscode)</li> </ul>","tags":["unreal-engine"]},{"location":"UE/2_coding/#cpp-particularities","title":"CPP particularities","text":"","tags":["unreal-engine"]},{"location":"UE/2_coding/#const-method","title":"CONST Method","text":"<pre><code>bool Namespace::AMethod() const\n\n// \u2139\ufe0f this method cannot modify the state of the object, or it results in a compile error \n// For instance, if using in the method:\n// SetActorLocation = \u274c\n// GetActorLocation = \u2705\n</code></pre>","tags":["unreal-engine"]},{"location":"UE/2_coding/#frotator","title":"FRotator","text":"<p>\ud83d\udca1 tips for continuous rotation:</p> <pre><code>AddActorLocalRotation(RotationVelocity * DeltaTime);\n</code></pre>","tags":["unreal-engine"]},{"location":"UE/2_coding/#git-lfs","title":"git lfs","text":"<pre><code># Once only\nsudo apt-get install git-lfs\ngit lfs install\n\ngit lfs track \"*.uasset\"\ngit lfs track \"*.umap\"\ngit lfs track \"*.png\"\ngit lfs track \"*.jpg\"\ngit lfs track \"*.tga\"\ngit lfs track \"*.wav\"\ngit lfs track \"*.mp3\"\ngit lfs track \"*.fbx\"\n</code></pre> <ul> <li>add file at root of project <code>.gitattributes</code>:</li> </ul> <pre><code># Unreal Engine binary assets\n*.uasset filter=lfs diff=lfs merge=lfs -text\n*.umap   filter=lfs diff=lfs merge=lfs -text\n\n# Common large binary types\n*.png    filter=lfs diff=lfs merge=lfs -text\n*.jpg    filter=lfs diff=lfs merge=lfs -text\n*.tga    filter=lfs diff=lfs merge=lfs -text\n*.wav    filter=lfs diff=lfs merge=lfs -text\n*.mp3    filter=lfs diff=lfs merge=lfs -text\n*.mov    filter=lfs diff=lfs merge=lfs -text\n*.mp4    filter=lfs diff=lfs merge=lfs -text\n*.fbx    filter=lfs diff=lfs merge=lfs -text\n\n# Optional (if using Megascans/Metahuman, add more formats like EXR, TIFF, etc.)\n</code></pre> <pre><code># for each project\ngit init\ngit add .gitattributes\ngit add .\ngit commit -m \"Initial Unreal project with Git LFS\"\n</code></pre> <ul> <li>check:</li> </ul> <pre><code>git lfs ls-files\n</code></pre> <p>You should see .uasset, .umap, and other large binaries listed.</p>","tags":["unreal-engine"]}]}